// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.DataAccess;

namespace server.Migrations
{
    [DbContext(typeof(pokemonDataContext))]
    partial class pokemonDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("server.DataAccess.entities.abilities", b =>
                {
                    b.Property<string>("ability_name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ability_name");

                    b.ToTable("abilities");
                });

            modelBuilder.Entity("server.DataAccess.entities.accuracyValues", b =>
                {
                    b.Property<int>("accuracy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("accuracy");

                    b.ToTable("accuracy_values");
                });

            modelBuilder.Entity("server.DataAccess.entities.eggGroups", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("name");

                    b.ToTable("egg_groups");
                });

            modelBuilder.Entity("server.DataAccess.entities.eggMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("move")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id");

                    b.ToTable("egg_moves");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolution", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("evolution_id")
                        .HasColumnType("int");

                    b.Property<int>("evolved_pokemon")
                        .HasColumnType("int");

                    b.Property<bool>("friendship")
                        .HasColumnType("bit");

                    b.Property<string>("held_item")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("level")
                        .HasColumnType("int");

                    b.Property<string>("move")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<string>("time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("trade")
                        .HasColumnType("bit");

                    b.Property<string>("use_item")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("evolution_id");

                    b.HasIndex("evolved_pokemon")
                        .IsUnique();

                    b.HasIndex("held_item");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id")
                        .IsUnique();

                    b.HasIndex("use_item");

                    b.ToTable("evolution");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolutionGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("id");

                    b.ToTable("evolution_group");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolutionLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("move")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id");

                    b.ToTable("evolution_learned_moves");
                });

            modelBuilder.Entity("server.DataAccess.entities.items", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("name");

                    b.ToTable("items");
                });

            modelBuilder.Entity("server.DataAccess.entities.levelupLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("move")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id");

                    b.ToTable("levelup_learned_moves");
                });

            modelBuilder.Entity("server.DataAccess.entities.moveCategories", b =>
                {
                    b.Property<string>("category")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("category");

                    b.ToTable("move_categories");
                });

            modelBuilder.Entity("server.DataAccess.entities.moves", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("accuracy")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("power")
                        .HasColumnType("int");

                    b.Property<int>("pp")
                        .HasColumnType("int");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<string>("typing_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("name");

                    b.HasIndex("accuracy");

                    b.HasIndex("category");

                    b.HasIndex("power");

                    b.HasIndex("pp");

                    b.HasIndex("typing_name");

                    b.ToTable("moves");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonAbilties", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ability")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("hidden")
                        .HasColumnType("bit");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ability");

                    b.HasIndex("pokemon_id");

                    b.ToTable("pokemon_abilities");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEggGroups", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("eggGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("eggGroup");

                    b.HasIndex("pokemon_id");

                    b.ToTable("pokemon_egg_groups");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEntity", b =>
                {
                    b.Property<int>("pokemon_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("attack")
                        .HasColumnType("int");

                    b.Property<int>("defense")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("growth_rate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("height")
                        .HasColumnType("real");

                    b.Property<int>("hp")
                        .HasColumnType("int");

                    b.Property<int>("pokdex_id")
                        .HasColumnType("int");

                    b.Property<string>("pokemon_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("special_attack")
                        .HasColumnType("int");

                    b.Property<int>("special_defense")
                        .HasColumnType("int");

                    b.Property<string>("species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("speed")
                        .HasColumnType("int");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("pokemon_id");

                    b.ToTable("pokemon");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonTypes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("pokemon_id");

                    b.HasIndex("type");

                    b.ToTable("pokemon_types");
                });

            modelBuilder.Entity("server.DataAccess.entities.powerValues", b =>
                {
                    b.Property<int>("power")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("power");

                    b.ToTable("power_values");
                });

            modelBuilder.Entity("server.DataAccess.entities.ppValues", b =>
                {
                    b.Property<int>("pp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("pp");

                    b.ToTable("pp_values");
                });

            modelBuilder.Entity("server.DataAccess.entities.tm", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("move_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("move_name");

                    b.ToTable("tm");
                });

            modelBuilder.Entity("server.DataAccess.entities.tmLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<int>("tm_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("pokemon_id");

                    b.HasIndex("tm_id");

                    b.ToTable("tm_learned_moves");
                });

            modelBuilder.Entity("server.DataAccess.entities.tr", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("move_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("move_name");

                    b.ToTable("tr");
                });

            modelBuilder.Entity("server.DataAccess.entities.trLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<int>("tr_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("pokemon_id");

                    b.HasIndex("tr_id");

                    b.ToTable("tr_learned_moves");
                });

            modelBuilder.Entity("server.DataAccess.entities.typeEffectiveness", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("attacking_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("defending_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("multiplier")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("attacking_type")
                        .IsUnique();

                    b.HasIndex("defending_type")
                        .IsUnique();

                    b.ToTable("type_effectiveness");
                });

            modelBuilder.Entity("server.DataAccess.entities.typing", b =>
                {
                    b.Property<string>("typing_name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("typing_name");

                    b.ToTable("typing");
                });

            modelBuilder.Entity("server.DataAccess.entities.eggMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolution", b =>
                {
                    b.HasOne("server.DataAccess.entities.evolutionGroup", "pokemon_evolution")
                        .WithMany()
                        .HasForeignKey("evolution_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemonEvolved")
                        .WithOne()
                        .HasForeignKey("server.DataAccess.entities.evolution", "evolved_pokemon")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.items", "heldItem")
                        .WithMany()
                        .HasForeignKey("held_item");

                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move");

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithOne()
                        .HasForeignKey("server.DataAccess.entities.evolution", "pokemon_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.items", "useItem")
                        .WithMany()
                        .HasForeignKey("use_item");

                    b.Navigation("heldItem");

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_evolution");

                    b.Navigation("pokemon_move");

                    b.Navigation("pokemonEvolved");

                    b.Navigation("useItem");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolutionLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.levelupLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.moves", b =>
                {
                    b.HasOne("server.DataAccess.entities.accuracyValues", "move_accuracy")
                        .WithMany()
                        .HasForeignKey("accuracy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.moveCategories", "move_category")
                        .WithMany()
                        .HasForeignKey("category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.powerValues", "move_power")
                        .WithMany()
                        .HasForeignKey("power")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.ppValues", "move_pp")
                        .WithMany()
                        .HasForeignKey("pp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.typing", "move_typing")
                        .WithMany()
                        .HasForeignKey("typing_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("move_accuracy");

                    b.Navigation("move_category");

                    b.Navigation("move_power");

                    b.Navigation("move_pp");

                    b.Navigation("move_typing");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonAbilties", b =>
                {
                    b.HasOne("server.DataAccess.entities.abilities", "pokemon_ability")
                        .WithMany()
                        .HasForeignKey("ability")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_ability");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEggGroups", b =>
                {
                    b.HasOne("server.DataAccess.entities.eggGroups", "pokemon_egg_group")
                        .WithMany()
                        .HasForeignKey("eggGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_egg_group");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonTypes", b =>
                {
                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.typing", "pokemon_type")
                        .WithMany()
                        .HasForeignKey("type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_type");
                });

            modelBuilder.Entity("server.DataAccess.entities.tm", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "move")
                        .WithMany()
                        .HasForeignKey("move_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("move");
                });

            modelBuilder.Entity("server.DataAccess.entities.tmLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.tm", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("tm_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.tr", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "move")
                        .WithMany()
                        .HasForeignKey("move_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("move");
                });

            modelBuilder.Entity("server.DataAccess.entities.trLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.tr", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("tr_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.typeEffectiveness", b =>
                {
                    b.HasOne("server.DataAccess.entities.typing", "attack")
                        .WithOne()
                        .HasForeignKey("server.DataAccess.entities.typeEffectiveness", "attacking_type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.typing", "defend")
                        .WithOne()
                        .HasForeignKey("server.DataAccess.entities.typeEffectiveness", "defending_type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("attack");

                    b.Navigation("defend");
                });
#pragma warning restore 612, 618
        }
    }
}
