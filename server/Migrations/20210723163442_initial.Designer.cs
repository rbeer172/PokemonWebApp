// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.DataAccess;

namespace server.Migrations
{
    [DbContext(typeof(pokemonDataContext))]
    [Migration("20210723163442_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("server.DataAccess.entities.abilities", b =>
                {
                    b.Property<string>("ability_name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ability_name");

                    b.ToTable("abilities");

                    b.HasData(
                        new
                        {
                            ability_name = "Overgrow",
                            description = "Increases the power of Grass-type moves by 50% when the ability-bearer's HP falls below a third of its maximum HP"
                        },
                        new
                        {
                            ability_name = "Chlorophyll",
                            description = "Doubles the ability-bearer's Speed during bright sunshine."
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.accuracyValues", b =>
                {
                    b.Property<int>("accuracy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("accuracy");

                    b.ToTable("accuracy_values");

                    b.HasData(
                        new
                        {
                            accuracy = 75
                        },
                        new
                        {
                            accuracy = 100
                        },
                        new
                        {
                            accuracy = 30
                        },
                        new
                        {
                            accuracy = 50
                        },
                        new
                        {
                            accuracy = 55
                        },
                        new
                        {
                            accuracy = 60
                        },
                        new
                        {
                            accuracy = 70
                        },
                        new
                        {
                            accuracy = 80
                        },
                        new
                        {
                            accuracy = 85
                        },
                        new
                        {
                            accuracy = 90
                        },
                        new
                        {
                            accuracy = 95
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.eggGroups", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("name");

                    b.ToTable("egg_groups");

                    b.HasData(
                        new
                        {
                            name = "Grass"
                        },
                        new
                        {
                            name = "Monster"
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.eggMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("move")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id");

                    b.ToTable("egg_moves");

                    b.HasData(
                        new
                        {
                            id = 1,
                            move = "Petal Dance",
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 2,
                            move = "Petal Dance",
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 3,
                            move = "Petal Dance",
                            pokemon_id = 3
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.evolution", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("evolution_id")
                        .HasColumnType("int");

                    b.Property<int>("evolved_pokemon")
                        .HasColumnType("int");

                    b.Property<bool>("friendship")
                        .HasColumnType("bit");

                    b.Property<string>("held_item")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("level")
                        .HasColumnType("int");

                    b.Property<string>("move")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<string>("time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("trade")
                        .HasColumnType("bit");

                    b.Property<string>("use_item")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("evolution_id");

                    b.HasIndex("evolved_pokemon")
                        .IsUnique();

                    b.HasIndex("held_item");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id")
                        .IsUnique();

                    b.HasIndex("use_item");

                    b.ToTable("evolution");

                    b.HasData(
                        new
                        {
                            id = 1,
                            evolution_id = 1,
                            evolved_pokemon = 2,
                            friendship = false,
                            level = 16,
                            pokemon_id = 1,
                            trade = false
                        },
                        new
                        {
                            id = 2,
                            evolution_id = 1,
                            evolved_pokemon = 3,
                            friendship = false,
                            level = 32,
                            pokemon_id = 2,
                            trade = false
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.evolutionGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("id");

                    b.ToTable("evolution_group");

                    b.HasData(
                        new
                        {
                            id = 1
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.evolutionLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("move")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id");

                    b.ToTable("evolution_learned_moves");

                    b.HasData(
                        new
                        {
                            id = 1,
                            move = "Petal Blizzard",
                            pokemon_id = 3
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.items", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("name");

                    b.ToTable("items");
                });

            modelBuilder.Entity("server.DataAccess.entities.levelupLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("move")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("move");

                    b.HasIndex("pokemon_id");

                    b.ToTable("levelup_learned_moves");

                    b.HasData(
                        new
                        {
                            id = 1,
                            level = 1,
                            move = "Tackle",
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 2,
                            level = 15,
                            move = "Poison Powder",
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 3,
                            level = 36,
                            move = "Solar Beam",
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 4,
                            level = 1,
                            move = "Tackle",
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 5,
                            level = 15,
                            move = "Poison Powder",
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 6,
                            level = 50,
                            move = "Solar Beam",
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 7,
                            level = 1,
                            move = "Tackle",
                            pokemon_id = 3
                        },
                        new
                        {
                            id = 8,
                            level = 15,
                            move = "Poison Powder",
                            pokemon_id = 3
                        },
                        new
                        {
                            id = 9,
                            level = 58,
                            move = "Solar Beam",
                            pokemon_id = 3
                        },
                        new
                        {
                            id = 10,
                            level = 1,
                            move = "Petal Blizzard",
                            pokemon_id = 3
                        },
                        new
                        {
                            id = 11,
                            level = 1,
                            move = "Petal Dance",
                            pokemon_id = 3
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.moveCategories", b =>
                {
                    b.Property<string>("category")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("category");

                    b.ToTable("move_categories");

                    b.HasData(
                        new
                        {
                            category = "physical"
                        },
                        new
                        {
                            category = "special"
                        },
                        new
                        {
                            category = "status"
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.moves", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("accuracy")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("power")
                        .HasColumnType("int");

                    b.Property<int>("pp")
                        .HasColumnType("int");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<string>("typing_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("name");

                    b.HasIndex("accuracy");

                    b.HasIndex("category");

                    b.HasIndex("power");

                    b.HasIndex("pp");

                    b.HasIndex("typing_name");

                    b.ToTable("moves");

                    b.HasData(
                        new
                        {
                            name = "Tackle",
                            accuracy = 100,
                            category = "physical",
                            description = "A basic attack that deals damage.",
                            power = 40,
                            pp = 35,
                            priority = 0,
                            typing_name = "normal"
                        },
                        new
                        {
                            name = "Poison Powder",
                            accuracy = 75,
                            category = "status",
                            description = "Target will be poisoned. Poisoned Pokémon lose 1⁄8 of their maximum HP each turn.",
                            pp = 35,
                            priority = 0,
                            typing_name = "poison"
                        },
                        new
                        {
                            name = "Solar Beam",
                            accuracy = 100,
                            category = "special",
                            description = "Charges the first turn then deals damage the second turn. If during sunlight or holding a power herb, deals damage the first turn.Rain, hail and sandstorm weather reduces power by 50%",
                            power = 120,
                            pp = 10,
                            priority = 0,
                            typing_name = "grass"
                        },
                        new
                        {
                            name = "Petal Dance",
                            accuracy = 100,
                            category = "special",
                            description = "The user of Petal Dance attacks for 2-3 turns, during which it cannot switch out, and then becomes confused, for 1-4 attacking turns (50% chance in Generations 1-6). The damage received is as if the Pokémon attacks itself with a typeless 40 base power Physical attack. If Petal Dance is disrupted (e.g. if the move misses or the user cannot attack due to paralysis) then it will stop and not cause confusion.",
                            power = 120,
                            pp = 10,
                            priority = 0,
                            typing_name = "grass"
                        },
                        new
                        {
                            name = "Giga Drain",
                            accuracy = 100,
                            category = "special",
                            description = "Deals damage and the user will recover 50% of the HP drained.",
                            power = 75,
                            pp = 10,
                            priority = 0,
                            typing_name = "grass"
                        },
                        new
                        {
                            name = "Swords Dance",
                            category = "status",
                            description = "Raises the user's Attack by two stages up to a max of six.",
                            pp = 20,
                            priority = 0,
                            typing_name = "normal"
                        },
                        new
                        {
                            name = "Petal Blizzard",
                            accuracy = 100,
                            category = "physical",
                            description = "Deals damage.",
                            power = 90,
                            pp = 15,
                            priority = 0,
                            typing_name = "grass"
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonAbilties", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ability")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("hidden")
                        .HasColumnType("bit");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ability");

                    b.HasIndex("pokemon_id");

                    b.ToTable("pokemon_abilities");

                    b.HasData(
                        new
                        {
                            id = 1,
                            ability = "Overgrow",
                            hidden = false,
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 2,
                            ability = "Chlorophyll",
                            hidden = true,
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 3,
                            ability = "Overgrow",
                            hidden = false,
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 4,
                            ability = "Chlorophyll",
                            hidden = true,
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 5,
                            ability = "Overgrow",
                            hidden = false,
                            pokemon_id = 3
                        },
                        new
                        {
                            id = 6,
                            ability = "Chlorophyll",
                            hidden = true,
                            pokemon_id = 3
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEggGroups", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("eggGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("eggGroup");

                    b.HasIndex("pokemon_id");

                    b.ToTable("pokemon_egg_groups");

                    b.HasData(
                        new
                        {
                            id = 1,
                            eggGroup = "Grass",
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 2,
                            eggGroup = "Monster",
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 3,
                            eggGroup = "Grass",
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 4,
                            eggGroup = "Monster",
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 5,
                            eggGroup = "Grass",
                            pokemon_id = 3
                        },
                        new
                        {
                            id = 6,
                            eggGroup = "Monster",
                            pokemon_id = 3
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEntity", b =>
                {
                    b.Property<int>("pokemon_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("attack")
                        .HasColumnType("int");

                    b.Property<int>("defense")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("height")
                        .HasColumnType("real");

                    b.Property<int>("hp")
                        .HasColumnType("int");

                    b.Property<int>("max_exp")
                        .HasColumnType("int");

                    b.Property<int>("pokdex_id")
                        .HasColumnType("int");

                    b.Property<string>("pokemon_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("special_attack")
                        .HasColumnType("int");

                    b.Property<int>("special_defense")
                        .HasColumnType("int");

                    b.Property<string>("species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("speed")
                        .HasColumnType("int");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("pokemon_id");

                    b.ToTable("pokemon");

                    b.HasData(
                        new
                        {
                            pokemon_id = 1,
                            attack = 49,
                            defense = 49,
                            description = "A Grass/Poison type Pokémon introduced in Generation 1.",
                            height = 0.7f,
                            hp = 45,
                            max_exp = 1059862,
                            pokdex_id = 1,
                            pokemon_name = "Bulbasaur",
                            special_attack = 65,
                            special_defense = 65,
                            species = "Seed",
                            speed = 45,
                            total = 318,
                            weight = 6.9f
                        },
                        new
                        {
                            pokemon_id = 2,
                            attack = 62,
                            defense = 63,
                            description = "A Grass/Poison type Pokémon introduced in Generation 1.",
                            height = 1f,
                            hp = 60,
                            max_exp = 1059862,
                            pokdex_id = 2,
                            pokemon_name = "Ivysaur",
                            special_attack = 80,
                            special_defense = 80,
                            species = "Seed",
                            speed = 60,
                            total = 405,
                            weight = 13f
                        },
                        new
                        {
                            pokemon_id = 3,
                            attack = 82,
                            defense = 83,
                            description = "A Grass/Poison type Pokémon introduced in Generation 1.",
                            height = 2f,
                            hp = 80,
                            max_exp = 1059862,
                            pokdex_id = 3,
                            pokemon_name = "Venusaur",
                            special_attack = 100,
                            special_defense = 100,
                            species = "Seed",
                            speed = 80,
                            total = 525,
                            weight = 100f
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEvolutionGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("group_id")
                        .HasColumnType("int");

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("group_id");

                    b.HasIndex("pokemon_id");

                    b.ToTable("pokemon_evolution_group");

                    b.HasData(
                        new
                        {
                            id = 1,
                            group_id = 1,
                            pokemon_id = 1
                        },
                        new
                        {
                            id = 2,
                            group_id = 1,
                            pokemon_id = 2
                        },
                        new
                        {
                            id = 3,
                            group_id = 1,
                            pokemon_id = 3
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonTypes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("pokemon_id");

                    b.HasIndex("type");

                    b.ToTable("pokemon_types");

                    b.HasData(
                        new
                        {
                            id = 1,
                            pokemon_id = 1,
                            type = "grass"
                        },
                        new
                        {
                            id = 2,
                            pokemon_id = 1,
                            type = "poison"
                        },
                        new
                        {
                            id = 3,
                            pokemon_id = 2,
                            type = "grass"
                        },
                        new
                        {
                            id = 4,
                            pokemon_id = 2,
                            type = "poison"
                        },
                        new
                        {
                            id = 5,
                            pokemon_id = 3,
                            type = "grass"
                        },
                        new
                        {
                            id = 6,
                            pokemon_id = 3,
                            type = "poison"
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.powerValues", b =>
                {
                    b.Property<int>("power")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("power");

                    b.ToTable("power_values");

                    b.HasData(
                        new
                        {
                            power = 40
                        },
                        new
                        {
                            power = 75
                        },
                        new
                        {
                            power = 90
                        },
                        new
                        {
                            power = 120
                        },
                        new
                        {
                            power = 10
                        },
                        new
                        {
                            power = 15
                        },
                        new
                        {
                            power = 18
                        },
                        new
                        {
                            power = 20
                        },
                        new
                        {
                            power = 30
                        },
                        new
                        {
                            power = 35
                        },
                        new
                        {
                            power = 45
                        },
                        new
                        {
                            power = 50
                        },
                        new
                        {
                            power = 55
                        },
                        new
                        {
                            power = 60
                        },
                        new
                        {
                            power = 65
                        },
                        new
                        {
                            power = 70
                        },
                        new
                        {
                            power = 80
                        },
                        new
                        {
                            power = 95
                        },
                        new
                        {
                            power = 100
                        },
                        new
                        {
                            power = 110
                        },
                        new
                        {
                            power = 125
                        },
                        new
                        {
                            power = 130
                        },
                        new
                        {
                            power = 140
                        },
                        new
                        {
                            power = 150
                        },
                        new
                        {
                            power = 160
                        },
                        new
                        {
                            power = 200
                        },
                        new
                        {
                            power = 250
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.ppValues", b =>
                {
                    b.Property<int>("pp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("pp");

                    b.ToTable("pp_values");

                    b.HasData(
                        new
                        {
                            pp = 10
                        },
                        new
                        {
                            pp = 15
                        },
                        new
                        {
                            pp = 20
                        },
                        new
                        {
                            pp = 35
                        },
                        new
                        {
                            pp = 5
                        },
                        new
                        {
                            pp = 25
                        },
                        new
                        {
                            pp = 30
                        },
                        new
                        {
                            pp = 40
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.tm", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("move_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("move_name")
                        .IsUnique();

                    b.ToTable("tm");

                    b.HasData(
                        new
                        {
                            id = 28,
                            move_name = "Giga Drain"
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.tmLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<int>("tm_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("pokemon_id");

                    b.HasIndex("tm_id");

                    b.ToTable("tm_learned_moves");

                    b.HasData(
                        new
                        {
                            id = 1,
                            pokemon_id = 1,
                            tm_id = 28
                        },
                        new
                        {
                            id = 2,
                            pokemon_id = 2,
                            tm_id = 28
                        },
                        new
                        {
                            id = 3,
                            pokemon_id = 3,
                            tm_id = 28
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.tr", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("move_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("move_name")
                        .IsUnique();

                    b.ToTable("tr");

                    b.HasData(
                        new
                        {
                            id = 1,
                            move_name = "Swords Dance"
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.trLearnedMoves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("pokemon_id")
                        .HasColumnType("int");

                    b.Property<int>("tr_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("pokemon_id");

                    b.HasIndex("tr_id");

                    b.ToTable("tr_learned_moves");

                    b.HasData(
                        new
                        {
                            id = 1,
                            pokemon_id = 1,
                            tr_id = 1
                        },
                        new
                        {
                            id = 2,
                            pokemon_id = 2,
                            tr_id = 1
                        },
                        new
                        {
                            id = 3,
                            pokemon_id = 3,
                            tr_id = 1
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.typeEffectiveness", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("attacking_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("defending_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("multiplier")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("attacking_type");

                    b.HasIndex("defending_type");

                    b.ToTable("type_effectiveness");

                    b.HasData(
                        new
                        {
                            id = 1,
                            attacking_type = "normal",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 2,
                            attacking_type = "fire",
                            defending_type = "grass",
                            multiplier = 2f
                        },
                        new
                        {
                            id = 3,
                            attacking_type = "water",
                            defending_type = "grass",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 4,
                            attacking_type = "electric",
                            defending_type = "grass",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 5,
                            attacking_type = "grass",
                            defending_type = "grass",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 7,
                            attacking_type = "ice",
                            defending_type = "grass",
                            multiplier = 2f
                        },
                        new
                        {
                            id = 8,
                            attacking_type = "fighting",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 9,
                            attacking_type = "poison",
                            defending_type = "grass",
                            multiplier = 2f
                        },
                        new
                        {
                            id = 10,
                            attacking_type = "ground",
                            defending_type = "grass",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 11,
                            attacking_type = "flying",
                            defending_type = "grass",
                            multiplier = 2f
                        },
                        new
                        {
                            id = 12,
                            attacking_type = "psychic",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 13,
                            attacking_type = "bug",
                            defending_type = "grass",
                            multiplier = 2f
                        },
                        new
                        {
                            id = 14,
                            attacking_type = "rock",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 15,
                            attacking_type = "ghost",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 16,
                            attacking_type = "dragon",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 17,
                            attacking_type = "dark",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 18,
                            attacking_type = "steel",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 19,
                            attacking_type = "fairy",
                            defending_type = "grass",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 20,
                            attacking_type = "normal",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 21,
                            attacking_type = "fire",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 22,
                            attacking_type = "water",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 23,
                            attacking_type = "electric",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 24,
                            attacking_type = "grass",
                            defending_type = "poison",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 25,
                            attacking_type = "ice",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 26,
                            attacking_type = "fighting",
                            defending_type = "poison",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 27,
                            attacking_type = "poison",
                            defending_type = "poison",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 28,
                            attacking_type = "ground",
                            defending_type = "poison",
                            multiplier = 2f
                        },
                        new
                        {
                            id = 29,
                            attacking_type = "flying",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 30,
                            attacking_type = "psychic",
                            defending_type = "poison",
                            multiplier = 2f
                        },
                        new
                        {
                            id = 31,
                            attacking_type = "bug",
                            defending_type = "poison",
                            multiplier = 0.5f
                        },
                        new
                        {
                            id = 32,
                            attacking_type = "rock",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 33,
                            attacking_type = "ghost",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 34,
                            attacking_type = "dragon",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 35,
                            attacking_type = "dark",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 36,
                            attacking_type = "steel",
                            defending_type = "poison",
                            multiplier = 1f
                        },
                        new
                        {
                            id = 37,
                            attacking_type = "fairy",
                            defending_type = "poison",
                            multiplier = 0.5f
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.typing", b =>
                {
                    b.Property<string>("typing_name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("typing_name");

                    b.ToTable("typing");

                    b.HasData(
                        new
                        {
                            typing_name = "normal"
                        },
                        new
                        {
                            typing_name = "fire"
                        },
                        new
                        {
                            typing_name = "water"
                        },
                        new
                        {
                            typing_name = "electric"
                        },
                        new
                        {
                            typing_name = "grass"
                        },
                        new
                        {
                            typing_name = "ice"
                        },
                        new
                        {
                            typing_name = "fighting"
                        },
                        new
                        {
                            typing_name = "poison"
                        },
                        new
                        {
                            typing_name = "ground"
                        },
                        new
                        {
                            typing_name = "flying"
                        },
                        new
                        {
                            typing_name = "psychic"
                        },
                        new
                        {
                            typing_name = "bug"
                        },
                        new
                        {
                            typing_name = "rock"
                        },
                        new
                        {
                            typing_name = "ghost"
                        },
                        new
                        {
                            typing_name = "dragon"
                        },
                        new
                        {
                            typing_name = "dark"
                        },
                        new
                        {
                            typing_name = "steel"
                        },
                        new
                        {
                            typing_name = "fairy"
                        });
                });

            modelBuilder.Entity("server.DataAccess.entities.eggMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("eggMoves")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolution", b =>
                {
                    b.HasOne("server.DataAccess.entities.evolutionGroup", "pokemon_evolution")
                        .WithMany("evolutions")
                        .HasForeignKey("evolution_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemonEvolved")
                        .WithOne()
                        .HasForeignKey("server.DataAccess.entities.evolution", "evolved_pokemon")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.items", "heldItem")
                        .WithMany()
                        .HasForeignKey("held_item");

                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move");

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithOne()
                        .HasForeignKey("server.DataAccess.entities.evolution", "pokemon_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.items", "useItem")
                        .WithMany()
                        .HasForeignKey("use_item");

                    b.Navigation("heldItem");

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_evolution");

                    b.Navigation("pokemon_move");

                    b.Navigation("pokemonEvolved");

                    b.Navigation("useItem");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolutionLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("evolutionMoves")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.levelupLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("move")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("levelUpMoves")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.moves", b =>
                {
                    b.HasOne("server.DataAccess.entities.accuracyValues", "move_accuracy")
                        .WithMany()
                        .HasForeignKey("accuracy");

                    b.HasOne("server.DataAccess.entities.moveCategories", "move_category")
                        .WithMany()
                        .HasForeignKey("category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.powerValues", "move_power")
                        .WithMany()
                        .HasForeignKey("power");

                    b.HasOne("server.DataAccess.entities.ppValues", "move_pp")
                        .WithMany()
                        .HasForeignKey("pp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.typing", "move_typing")
                        .WithMany()
                        .HasForeignKey("typing_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("move_accuracy");

                    b.Navigation("move_category");

                    b.Navigation("move_power");

                    b.Navigation("move_pp");

                    b.Navigation("move_typing");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonAbilties", b =>
                {
                    b.HasOne("server.DataAccess.entities.abilities", "pokemon_ability")
                        .WithMany()
                        .HasForeignKey("ability")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("abilities")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_ability");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEggGroups", b =>
                {
                    b.HasOne("server.DataAccess.entities.eggGroups", "pokemon_egg_group")
                        .WithMany()
                        .HasForeignKey("eggGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("eggGroups")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_egg_group");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEvolutionGroup", b =>
                {
                    b.HasOne("server.DataAccess.entities.evolutionGroup", "group")
                        .WithMany("pokemon")
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany()
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("pokemon");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonTypes", b =>
                {
                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("type")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.typing", "pokemon_type")
                        .WithMany()
                        .HasForeignKey("type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_type");
                });

            modelBuilder.Entity("server.DataAccess.entities.tm", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "move")
                        .WithOne("TM")
                        .HasForeignKey("server.DataAccess.entities.tm", "move_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("move");
                });

            modelBuilder.Entity("server.DataAccess.entities.tmLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("tmMoves")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.tm", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("tm_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.tr", b =>
                {
                    b.HasOne("server.DataAccess.entities.moves", "move")
                        .WithOne("TR")
                        .HasForeignKey("server.DataAccess.entities.tr", "move_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("move");
                });

            modelBuilder.Entity("server.DataAccess.entities.trLearnedMoves", b =>
                {
                    b.HasOne("server.DataAccess.entities.pokemonEntity", "pokemon")
                        .WithMany("trMoves")
                        .HasForeignKey("pokemon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.tr", "pokemon_move")
                        .WithMany()
                        .HasForeignKey("tr_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pokemon");

                    b.Navigation("pokemon_move");
                });

            modelBuilder.Entity("server.DataAccess.entities.typeEffectiveness", b =>
                {
                    b.HasOne("server.DataAccess.entities.typing", "attack")
                        .WithMany()
                        .HasForeignKey("attacking_type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.DataAccess.entities.typing", "defend")
                        .WithMany()
                        .HasForeignKey("defending_type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("attack");

                    b.Navigation("defend");
                });

            modelBuilder.Entity("server.DataAccess.entities.evolutionGroup", b =>
                {
                    b.Navigation("evolutions");

                    b.Navigation("pokemon");
                });

            modelBuilder.Entity("server.DataAccess.entities.moves", b =>
                {
                    b.Navigation("TM");

                    b.Navigation("TR");
                });

            modelBuilder.Entity("server.DataAccess.entities.pokemonEntity", b =>
                {
                    b.Navigation("abilities");

                    b.Navigation("eggGroups");

                    b.Navigation("eggMoves");

                    b.Navigation("evolutionMoves");

                    b.Navigation("levelUpMoves");

                    b.Navigation("tmMoves");

                    b.Navigation("trMoves");

                    b.Navigation("type");
                });
#pragma warning restore 612, 618
        }
    }
}
